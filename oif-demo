#!/usr/bin/env bash
set -euo pipefail

# OIF Demo CLI Tool
# Unified interface for interacting with the OIF solver system

# Get script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LIB_DIR="${SCRIPT_DIR}/scripts/demo/lib"
OUTPUT_DIR="${SCRIPT_DIR}/demo-output"
CONFIG_DIR="${SCRIPT_DIR}/config"

# Ensure output directory exists
mkdir -p "$OUTPUT_DIR"

# Export directories for use in modules
export SCRIPT_DIR
export LIB_DIR
export OUTPUT_DIR
export CONFIG_DIR

# Source all modules
source "${LIB_DIR}/common.sh"
source "${LIB_DIR}/ui.sh"
source "${LIB_DIR}/config.sh"
source "${LIB_DIR}/blockchain.sh"
source "${LIB_DIR}/forge.sh"
source "${LIB_DIR}/signature.sh"
source "${LIB_DIR}/jwt.sh"
source "${LIB_DIR}/api.sh"
source "${LIB_DIR}/deployment.sh"
source "${LIB_DIR}/intents.sh"
source "${LIB_DIR}/quotes.sh"

# Show help message
show_help() {
    print_banner
    echo ""
    echo "Usage: oif-demo <command> [options]"
    echo ""
    echo "Commands:"
    echo "  env     {up|down|status|reset}                                          Manage local environment"
    echo "  init    <config-file>                                                   Load existing configuration"
    echo "  intent  {build|submit|test} [--onchain]                                 Intent operations"
    echo "  quote   {get|accept|test}                                               Quote operations"
    echo "  jwt     {register|validate|test}                                        JWT authentication operations"
    echo "  balance [target]                                                        Check balances"
    echo "  monitor [interval] [target]                                             Monitor balances with auto-refresh"
    echo "  help                                                                    Show this help message"
    echo ""
    echo "Balance targets:"
    echo "  user                                                                    User balances"
    echo "  recipient                                                               Recipient balances"
    echo "  solver                                                                  Solver balances"
    echo "  settlers|settler                                                        All settler balances"
    echo "  escrow                                                                  Escrow settler balances"
    echo "  compact                                                                 Compact settler balances"
    echo "  all (default)                                                           All balances"
    echo ""
    echo "Environment commands:"
    echo "  env up                                                                  Start Anvil chains, deploy contracts, generate config"
    echo "  env down                                                                Stop Anvil chains"
    echo "  env status                                                              Check chain status"
    echo "  env reset                                                               Reset environment and data"
    echo ""
    echo "Examples:"
    echo "  oif-demo env up                                                         Start local environment and generate config"
    echo "  oif-demo init config/demo.toml                                          Load existing configuration"
    echo "  "
    echo "  # Offchain intent submission (via solver API):"
    echo "  oif-demo intent build escrow permit2 31337 31338 TokenA TokenB          Build escrow intent with TokenA→TokenB"
    echo "  oif-demo intent build compact 31337 31338 TokenA TokenB                 Build compact intent with TokenA→TokenB"
    echo "  oif-demo intent submit demo-output/post_intent.req.json                 Submit intent to solver API"
    echo "  oif-demo intent test escrow permit2 A2B                                 Build and submit escrow intent TokenA→TokenB"
    echo "  oif-demo intent test escrow eip3009 A2B                                 Build and submit EIP-3009 intent TokenA→TokenB"
    echo "  oif-demo intent test compact A2B                                        Build and submit compact intent TokenA→TokenB"
    echo "  "
    echo "  # Onchain intent submission (direct to blockchain):"
    echo "  oif-demo intent build --onchain escrow 31337 31338 TokenA TokenB        Build intent for onchain submission"
    echo "  oif-demo intent submit --onchain demo-output/post_intent.req.json       Submit intent directly to blockchain"
    echo "  oif-demo intent test --onchain escrow A2B                               Build and submit intent onchain"
    echo "  "
    echo "  # Quote operations:"
    echo "  oif-demo quote get demo-output/get_quote.req.json                       Request quote for intent"
    echo "  oif-demo quote test escrow permit2 A2B                                  Build escrow intent, get quote, and accept"
    echo "  oif-demo quote test compact A2B                                         Build compact intent, get quote, and accept"
    echo "  "
    echo "  # JWT authentication:"
    echo "  oif-demo jwt register my-client read-orders,create-orders               Register client and get JWT token"
    echo "  oif-demo jwt validate eyJhbGciOiJIUzI1NiIs...                           Validate JWT token"
    echo "  oif-demo jwt test                                                       Test JWT authentication flow"
    echo "  "
    echo "  # Balance monitoring:"
    echo "  oif-demo balance all                                                    Check all account balances"
    echo "  oif-demo monitor 5 recipient                                            Monitor recipient balances every 5s"
    echo ""
}

# Command handlers
handle_init() {
    local config_file="${1:-}"
    
    # Config file is mandatory
    if [ -z "$config_file" ] || [ "$config_file" = "--help" ] || [ "$config_file" = "-h" ]; then
        print_error "Config file is required"
        echo ""
        echo "Usage: oif-demo init <config-file>"
        echo ""
        echo "Examples:"
        echo "  oif-demo init config/demo.toml"
        echo "  oif-demo init config/testnet.toml"
        echo ""
        echo "To set up a new local environment with configuration:"
        echo "  oif-demo env up    # Starts chains, deploys contracts, generates config/demo.toml"
        exit 1
    fi
    
    print_info "Loading OIF Demo configuration from: $config_file"
    
    if [ ! -f "$config_file" ]; then
        print_error "Config file not found: $config_file"
        print_info "Run 'oif-demo generate' to create a configuration first"
        exit 1
    fi
    
    if config_load "$config_file"; then
        print_success "Configuration loaded successfully"
        config_show_summary
        
        # Export config for use by other commands
        config_export
    else
        print_error "Failed to load configuration from $config_file"
        exit 1
    fi
}

handle_env() {
    local action="${1:-status}"
    
    case "$action" in
        up)
            env_up
            ;;
        down)
            env_down
            ;;
        status)
            env_status
            ;;
        reset)
            if confirm_action "This will reset all environment data. Continue?"; then
                env_reset
            else
                print_info "Reset cancelled"
            fi
            ;;
        *)
            print_error "Unknown environment action: $action"
            print_info "Usage: oif-demo env {up|down|status|reset}"
            exit 1
            ;;
    esac
}

handle_intent() {
    local action="${1:-}"
    shift || true
    
    # Load config if not already loaded
    if ! config_is_loaded; then
        # Try to load default config
        if [ -f "${CONFIG_DIR}/demo.toml" ]; then
            if ! config_load "${CONFIG_DIR}/demo.toml"; then
                print_error "Failed to load configuration"
                print_info "Run 'oif-demo init config/demo.toml' to load configuration"
                print_info "Or 'oif-demo env up' to set up environment and generate config"
                exit 1
            fi
        else
            print_error "No configuration found"
            print_info "Run 'oif-demo env up' to set up environment and generate config"
            print_info "Or 'oif-demo init config/demo.toml' to load existing configuration"
            exit 1
        fi
    fi
    
    case "$action" in
        build)
            intent_build "$@"
            ;;
        submit)
            intent_submit "$@"
            ;;
        test)
            intent_test "$@"
            ;;
        *)
            print_error "Unknown intent action: $action"
            print_info "Usage: oif-demo intent {build|submit|test}"
            print_info "  intent test escrow <permit2|eip3009> <A2A|A2B|B2A|B2B>"
            print_info "  intent test compact <A2A|A2B|B2A|B2B>"
            exit 1
            ;;
    esac
}

handle_quote() {
    local action="${1:-}"
    shift || true
    
    # Load config if not already loaded
    if ! config_is_loaded; then
        # Try to load default config
        if [ -f "${CONFIG_DIR}/demo.toml" ]; then
            if ! config_load "${CONFIG_DIR}/demo.toml"; then
                print_error "Failed to load configuration"
                print_info "Run 'oif-demo init config/demo.toml' to load configuration"
                print_info "Or 'oif-demo env up' to set up environment and generate config"
                exit 1
            fi
        else
            print_error "No configuration found"
            print_info "Run 'oif-demo env up' to set up environment and generate config"
            print_info "Or 'oif-demo init config/demo.toml' to load existing configuration"
            exit 1
        fi
    fi
    
    case "$action" in
        get)
            quote_get "$@"
            ;;
        accept)
            quote_accept "$@"
            ;;
        test)
            quote_test "$@"
            ;;
        *)
            print_error "Unknown quote action: $action"
            print_info "Usage: oif-demo quote {get|accept|test}"
            print_info "  quote test escrow <permit2|eip3009> <A2A|A2B|B2A|B2B>"
            print_info "  quote test compact <A2A|A2B|B2A|B2B>"
            exit 1
            ;;
    esac
}

handle_balance() {
    local target="${1:-all}"
    
    # Load config if not already loaded
    if ! config_is_loaded; then
        # Try to load default config
        if [ -f "${CONFIG_DIR}/demo.toml" ]; then
            if ! config_load "${CONFIG_DIR}/demo.toml"; then
                print_error "Failed to load configuration"
                print_info "Run 'oif-demo init config/demo.toml' to load configuration"
                print_info "Or 'oif-demo env up' to set up environment and generate config"
                exit 1
            fi
        else
            print_error "No configuration found"
            print_info "Run 'oif-demo env up' to set up environment and generate config"
            print_info "Or 'oif-demo init config/demo.toml' to load existing configuration"
            exit 1
        fi
    fi
    
    case "$target" in
        user)
            get_user_balances
            ;;
        recipient)
            get_recipient_balances
            ;;
        solver)
            get_solver_balances
            ;;
        settlers|settler)
            get_settler_balances "all"
            ;;
        escrow)
            get_settler_balances "escrow"
            ;;
        compact)
            get_settler_balances "compact"
            ;;
        all)
            get_all_balances "true"
            ;;
        *)
            print_error "Unknown balance target: $target"
            print_info "Usage: oif-demo balance [user|recipient|solver|settlers|escrow|compact|all]"
            exit 1
            ;;
    esac
}

handle_jwt() {
    local action="${1:-}"
    shift || true
    
    case "$action" in
        register)
            jwt_register "$@"
            ;;
        validate)
            jwt_validate "$@"
            ;;
        test)
            jwt_test "$@"
            ;;
        *)
            print_error "Unknown JWT action: $action"
            print_info "Usage: oif-demo jwt {register|validate|test}"
            print_info "  jwt register <client> [scopes] [expiry_hours]    - Register client and get token"
            print_info "  jwt validate <token>                             - Validate a token"
            print_info "  jwt test [basic|full]                            - Test JWT flow"
            exit 1
            ;;
    esac
}

handle_monitor() {
    local interval="${1:-5}"
    local target="${2:-all}"
    
    # Load config if not already loaded
    if ! config_is_loaded; then
        # Try to load default config
        if [ -f "${CONFIG_DIR}/demo.toml" ]; then
            if ! config_load "${CONFIG_DIR}/demo.toml"; then
                print_error "Failed to load configuration"
                print_info "Run 'oif-demo init config/demo.toml' to load configuration"
                print_info "Or 'oif-demo env up' to set up environment and generate config"
                exit 1
            fi
        else
            print_error "No configuration found"
            print_info "Run 'oif-demo env up' to set up environment and generate config"
            print_info "Or 'oif-demo init config/demo.toml' to load existing configuration"
            exit 1
        fi
    fi
    
    # Validate interval is a number
    if ! [[ "$interval" =~ ^[0-9]+$ ]]; then
        print_error "Invalid refresh interval: $interval"
        print_info "Usage: oif-demo monitor [interval_seconds] [target]"
        exit 1
    fi
    
    # Start monitoring
    monitor_balances "$interval" "$target"
}


# Main command routing
main() {
    # Check if running with no arguments
    if [ $# -eq 0 ]; then
        show_help
        exit 0
    fi
    
    # Route to appropriate handler
    case "${1:-}" in
        init)
            shift
            handle_init "$@"
            ;;
        env)
            handle_env "${2:-}"
            ;;
        intent)
            shift
            handle_intent "$@"
            ;;
        quote)
            shift
            handle_quote "$@"
            ;;
        jwt)
            shift
            handle_jwt "$@"
            ;;
        balance)
            handle_balance "${2:-}"
            ;;
        monitor)
            handle_monitor "${2:-}" "${3:-}"
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            print_error "Unknown command: $1"
            show_help
            exit 1
            ;;
    esac
}

# Check dependencies
check_dependencies() {
    local missing_deps=()
    
    command -v cast >/dev/null 2>&1 || missing_deps+=("cast (foundry)")
    command -v forge >/dev/null 2>&1 || missing_deps+=("forge (foundry)")
    command -v jq >/dev/null 2>&1 || missing_deps+=("jq")
    command -v curl >/dev/null 2>&1 || missing_deps+=("curl")
    command -v bc >/dev/null 2>&1 || missing_deps+=("bc")
    command -v perl >/dev/null 2>&1 || missing_deps+=("perl")
    
    if [ ${#missing_deps[@]} -gt 0 ]; then
        print_error "Missing required dependencies:"
        for dep in "${missing_deps[@]}"; do
            echo "  - $dep"
        done
        echo ""
        echo "Please install missing dependencies and try again."
        exit 1
    fi
}

# Run dependency check on first run
check_dependencies

# Run main function with all arguments
main "$@"